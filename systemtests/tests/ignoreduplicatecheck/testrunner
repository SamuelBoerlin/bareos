#!/bin/bash
#
# 1. Set up backup job such that if it's doing a VF/consolidation it sleeps for up to 60s
# 2. Run 3 AI backups for consolidation
# 3. Start consolidation (-> will sleep for 60s)
# 4. Start incremental job
# 5. Wait for incremental job to finish
# 6. Cancel consolidation
# 7. Test succeeds if incremental job terminated successfully, i.e., not canceled as duplicate
#
# Same for copy/migration jobs which are also configured to sleep for 60s.
#
TestName="$(basename "$(pwd)")"
export TestName

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions
"${rscripts}"/cleanup
"${rscripts}"/setup


# Fill ${BackupDirectory} with data.
setup_data

start_test

start_bareos

# Create some incremental backups
cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/backups.out
label volume=TestVolume001 storage=File pool=Full
run job=ai-backup-bareos-fd level=Full yes
wait
@exec "sh -c 'touch ${tmp}/data/weird-files/file-1'"
run job=ai-backup-bareos-fd level=Incremental yes
wait
@exec "sh -c 'touch ${tmp}/data/weird-files/file-2'"
run job=ai-backup-bareos-fd level=Incremental yes
wait
@exec "sh -c 'touch ${tmp}/data/weird-files/file-3'"
run job=ai-backup-bareos-fd level=Incremental yes
wait
quit
END_OF_DATA
run_bconsole


#
# Copy
#

cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/copy.out
run job=Copy yes
wait jobid=5
@sleep 5
messages
@$out $tmp/copy_worker_before_status.out
llist jobid=6
@$out $tmp/copy.out
@exec "sh -c 'touch ${tmp}/data/weird-files/file-4'"
run job=ai-backup-bareos-fd level=Incremental yes
wait jobid=8
cancel jobid=6
wait
messages
@$out $tmp/copy_worker_status.out
llist jobid=6
@$out $tmp/copy_incremental_status.out
llist jobid=8
@$out /dev/null
quit
END_OF_DATA
run_bconsole

expect_not_grep "jobstatus: A" \
            "$tmp"/copy_incremental_status.out \
            "incremental job was canceled during copy"

expect_grep "jobstatus: T" \
            "$tmp"/copy_incremental_status.out \
            "incremental job did not terminate successfully during copy"


#
# Migration
#

cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/migrate.out
run job=Migrate yes
wait jobid=9
@sleep 5
messages
@$out $tmp/migrate_worker_before_status.out
llist jobid=10
@$out $tmp/migrate.out
@exec "sh -c 'touch ${tmp}/data/weird-files/file-5'"
run job=ai-backup-bareos-fd level=Incremental yes
wait jobid=12
cancel jobid=10
wait
messages
@$out $tmp/migrate_worker_status.out
llist jobid=10
@$out $tmp/migrate_incremental_status.out
llist jobid=12
@$out /dev/null
quit
END_OF_DATA
run_bconsole

expect_not_grep "jobstatus: A" \
            "$tmp"/migrate_incremental_status.out \
            "incremental job was canceled during migration"

expect_grep "jobstatus: T" \
            "$tmp"/migrate_incremental_status.out \
            "incremental job did not terminate successfully during migration"


#
# Consolidation
#

cat <<END_OF_DATA >$tmp/bconcmds
@$out /dev/null
messages
@$out $tmp/consolidate.out
run job=Consolidate yes
wait jobid=13
@sleep 5
messages
@$out $tmp/consolidate_worker_before_status.out
llist jobid=14
@$out $tmp/consolidate.out
@exec "sh -c 'touch ${tmp}/data/weird-files/file-6'"
run job=ai-backup-bareos-fd level=Incremental yes
wait jobid=15
cancel jobid=14
wait
messages
@$out $tmp/consolidate_worker_status.out
llist jobid=14
@$out $tmp/consolidate_incremental_status.out
llist jobid=15
@$out /dev/null
quit
END_OF_DATA
run_bconsole

expect_not_grep "jobstatus: A" \
            "$tmp"/consolidate_incremental_status.out \
            "incremental job was canceled during consolidation"

expect_grep "jobstatus: T" \
            "$tmp"/consolidate_incremental_status.out \
            "incremental job did not terminate successfully during consolidation"


end_test
